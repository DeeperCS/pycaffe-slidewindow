# -*- coding: utf-8 -*-
"""
Created on Fri Jan 15 13:40:21 2016

@author: joe
"""
import sys
sys.path.insert(0, '~/github/caffe/python')

import os
import numpy as np
import caffe
from caffe.proto import caffe_pb2
from google.protobuf import text_format
from PIL import Image
import glob
import matplotlib.pyplot as plt

def mirror_edges(X, nPixels):
    assert(nPixels>0)
    
    [s, height, width] = X.shape
    Xm = np.zeros([s, height+2*nPixels, width+2*nPixels], dtype=X.dtype)
    
    Xm[:, nPixels:height+nPixels, nPixels:width+nPixels] = X
    
    for i in range(s):
        # top left corner
        Xm[i, 0:nPixels, 0:nPixels] = np.fliplr(np.flipud(X[i, 0:nPixels, 0:nPixels]))
        
        # top right corner
        Xm[i, 0:nPixels, width+nPixels:width+2*nPixels] = np.fliplr(np.flipud(X[i, 0:nPixels, width-nPixels:width]))
        
        # bottom left corner
        Xm[i, height+nPixels:height+2*nPixels, 0:nPixels] = np.fliplr(np.flipud(X[i, height-nPixels:height, 0:nPixels]))
    
        # bottom right corner        
        Xm[i, height+nPixels:height+2*nPixels, width+nPixels:width+2*nPixels] = np.fliplr(np.flipud(X[i, height-nPixels:height, width-nPixels:width]))
        
        # top
        Xm[i, 0:nPixels, nPixels:width+nPixels] = np.flipud(X[i, 0:nPixels, 0:width])
        
        # bottom
        Xm[i, height+nPixels:height+2*nPixels, nPixels:width+nPixels] = np.flipud(X[i, height-nPixels:height, 0:width])
        
        # left
        Xm[i, nPixels:height+nPixels, 0:nPixels] = np.fliplr(X[i, 0:height, 0:nPixels])

        # right
        Xm[i, nPixels:height+nPixels, width+nPixels:width+2*nPixels] = np.fliplr(X[i, 0:height, width-nPixels:width])
        
    return Xm

def load_tiff_data(filePath, dtype='float32'):
    """ Loads data from a multilayer .tif file.  
    Returns result as a numpy tensor with dimensions (layers, width, height).
    """
    X = [];
    for dataFile in filePath:
        if not os.path.isfile(dataFile):
            raise RuntimeError('could not find file "%s"' % dataFile)
        
        # load the data from TIF files
        dataImg = Image.open(dataFile)
        
        Xi = np.array(dataImg, dtype=dtype)
        if len(Xi.shape)==3:
            Xi = Xi[...,0]
        Xi = np.reshape(Xi, (1, Xi.shape[0], Xi.shape[1]))  # add a slice dimension
        X.append(Xi)
            
    X = np.concatenate(X, axis=0)  # list -> tensor
        
    return X

def pixel_generator_test(X, tileRadius, batchSize):
    [s, height, width] = X.shape
    
    bitMask = np.ones(X.shape, dtype=bool)
    
    bitMask[:, 0:tileRadius, :] = 0
    bitMask[:, (height-tileRadius):height, :] = 0
    bitMask[:, :, 0:tileRadius] = 0
    bitMask[:, :, (width-tileRadius):width] = 0
    
    Idx = np.column_stack(np.nonzero(bitMask))
    
    for i in range(0, Idx.shape[0], batchSize):
        nRet = min(batchSize, Idx.shape[0]-i)
        yield Idx[i:(i+nRet), :]
    
    
def eval_cube(net, X, batchDim):
    tileRadius = batchDim[2]//2
    Xi = np.zeros(batchDim, dtype=np.float32)
    yDummy = np.zeros((batchDim[0],), dtype=np.float32)
    Yhat = None
    
    iterator = pixel_generator_test(X, tileRadius, batchDim[0])
    for Idx in iterator:
        for j in range(Idx.shape[0]):        
            left = Idx[j,1] - tileRadius
            right = Idx[j,1] + tileRadius + 1
            top = Idx[j,2] - tileRadius
            bottom = Idx[j,2] + tileRadius + 1
            Xi[j, 0, :, :] = X[Idx[j,0], left:right, top:bottom]
    
        net.set_input_arrays(Xi, yDummy)
        net.forward()
        yiHat = net.blobs['prob'].data
        
        nClasses = yiHat.shape[1]
        if Yhat is None: # on first iteration, create Yhat
            Yhat = -1*np.zeros((nClasses, X.shape[0], X.shape[1], X.shape[2]))
            
        # the size of yiHat may not match the remaining space in Yhat( not a full batch size)
        for j in range(nClasses):
            yijHat = np.squeeze(yiHat[:, j])
            assert(len(yijHat.shape)==1)
            Yhat[j, Idx[:,0], Idx[:,1], Idx[:,2]] = yijHat[:Idx.shape[0]]
    
    print('[deploy]: Finished!');
    return Yhat
        
if __name__=='__main__':
    caffe.set_mode_gpu()
    caffe.set_device(0)
    # 1.load TIF to X

############################################################################
#    fileDir = 'dataset_for_lmdb/test'
#    print('[deploy:]: loading EM data file: %s' % fileDir)
#    fileListData = sorted(glob.glob(fileDir+"/*."+'TIF'))
#    
#    X = load_tiff_data(fileListData, np.float32)
#    np.save('testX.npy', X)
############################################################################  
    # Load from npy or direcotry(method shown above)
    X = np.load('testX.npy')
    
    # 2. mirror to Xm
    tileEdge = 65  
    tileRadius = tileEdge//2
    
    Xm = mirror_edges(X, tileRadius)  
    
#    plt.figure()
#    plt.imshow(Xm[0,...], cmap='gray')
#    
#    plt.figure()
#    plt.imshow(X[0,...], cmap='gray')
    
    # 3.yield idx
    batchDim = [100, 1, tileEdge, tileEdge]
    print('batch-size:{}'.format(batchDim))
    

    # 4.test
    # Solver parameter
    solverFile = 'solver.prototxt'
    solverParam = caffe_pb2.SolverParameter()
    text_format.Merge(open(solverFile).read(), solverParam)
    # net parameter
    netFile = solverParam.net
    netParam = caffe_pb2.NetParameter()
    text_format.Merge(open(netFile).read(), netParam)
    # model storage
    outDir = solverParam.snapshot_prefix
    if not os.path.isdir(outDir):
        os.mkdir(outDir)
    
    #--------------
    # Create Caffe network
    #--------------
    model = './models/_iter_220.caffemodel'
    net = caffe.Net(str(netFile), model, caffe.TEST)
    
    for name, blobs in net.params.iteritems():
        print('{} : {}'.format(name, blobs[0].data.shape))
    
    Yhat = eval_cube(net, Xm, batchDim)
    
    Y = np.zeros((Yhat.shape[0], X.shape[1], X.shape[2]))
    Y[...] = np.squeeze(Yhat[:, :, tileRadius:tileRadius+X.shape[1], tileRadius:tileRadius+X.shape[2]])
    
    plt.imshow(Y[0,:,:], cmap='gray'), plt.pause(10) 

